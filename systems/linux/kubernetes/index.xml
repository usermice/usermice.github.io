<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes :: Hugo Relearn Theme</title>
    <link>https://usermice.github.io/systems/linux/kubernetes/</link>
    <description></description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>xxx@gmail.com (二哥)</managingEditor>
    <webMaster>xxx@gmail.com (二哥)</webMaster>
    <lastBuildDate>Tue, 25 Jun 2024 17:38:23 +0800</lastBuildDate>
    <atom:link href="https://usermice.github.io/systems/linux/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes_Template</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/kubernetes_template/</link>
      <pubDate>Tue, 25 Jun 2024 17:38:23 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/kubernetes_template/</guid>
      <description>资源控制器 graph LR A[思维导图] --&gt;B[1.前言] A[思维导图] --&gt;C[2.Namespace] A[思维导图] --&gt;D[3.Deployment] A[思维导图] --&gt;E[4.</description>
    </item>
    <item>
      <title>Kubernetes_Command</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/kubernetes_command/</link>
      <pubDate>Tue, 25 Jun 2024 17:23:27 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/kubernetes_command/</guid>
      <description>Kubernetes命令使用 名称地址 描述 Kubernetes官方命令文档 Kubernetes官方文档详解 Kube-shell crictl Crictl主要用于直接与容器运行时接口CRI进行交互。它用于调试和管理容器运行时，如 containerd或CRI-O中的容器 kubectl获取资源名称、使用命令 kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装和部署 kubectl api-resources是查看kubernetes资源命令 Kubernetes中所有的内容都抽象为资源，所有命令都是围绕资源操作、执行 资源分类 资源名称 缩写 描述 集群级别资源 nodes no 集群组成部分 集群级别资源 namespaces ns 隔离Pod Pods Pods po 装载容器 Pod资源控制器 replicationcontrollers rc 比较原始的Pod控制器，已经被废弃，由ReplicaSet替代 — replicasets rs 保证指定数量的Pod运行，并支持Pod数量变更，镜像版本变更 — deployments deploy 通过控制ReplicaSet来控制Pod，并支持滚动升级、版本回退 — daemonsets ds 在集群中的指定Node上都运行一个副本，一般用于守护进程类的任务 — jobs — 它创建出来的Pod只要完成任务就立即退出，用于执行一次性任务 — cronjobs cj 它创建的Pod会周期性的执行，用于执行周期性的任务 — horizontalpodautoscalers hpa 可以根据集群负载自动调整Pod的数量，实现削峰填谷 Pod资源控制器 statefulsets sts 管理有状态的应用 服务发现资源 services svc 统一Pod对外接口 服务发现资源 ingress ing 统一Pod对外接口 存储资源 volumeattachments — 存储 — persistentvolumes pv 存储 存储资源 persistentvolumeclaims pvc 存储 配置资源 configmaps cm 配置 配置资源 secrets — 配置 常用命令 命令 翻译 命令作用 — run 运行 在集群中运行一个指定的镜像 — get 获取 获取显示一个或多个资源 — set 设置 设置一个对象的特定特征 — create 创建 从文件或标准输入创建资源 — edit 编辑 编辑服务器上的资源 — patch 更新 更新一个资源，更新资源的字段 — apply 应用 通过文件名或标准输入将配置应用于资源 — replace 替换 用文件名或标准输入替换资源 — delete 删除 delete按文件名、标准输入、资源和名称，或按资源和标签选择器删除资源 — api-resources — 打印服务器上支持的API资源 — api-versions — 打印服务器上支持的API版本，格式为group/version 常用命令 version 版本 打印客户端和服务器版本信息 中级命令 命令 翻译 命令作用 — cp 复制 在Pod内外复制文件 — exec 执行 在容器中执行命令 — label 标签 更新资源上的标签 — logs 日志 打印pod中容器的日志 — attach 缠绕 进入运行中的容器、附加到正在运行的容器 — describe 描述 describe显示特定资源或资源组的详细信息 — expose 暴露 将复制控制器、服务、部署或pod暴露为新的Kubernetes服务Service — explain 解释 展示资源类型、属性文档，获取资源控制器字段使用 — annotate 注释 更新资源上的注释 — rollout 首次展示 管理资源的发布，查看、更新Pods版本发布 — scale 手动扩容、缩容 扩(缩)容Pod的数量,为Deployment、ReplicaSet或Replication Controller设置新的大小 — autoscale 监控CPU、内存自动扩容、缩容 自动调整Pod的数量，自动缩放Deployment、ReplicaSet、StatefulSet或ReplicationController — plugin — 提供与插件交互的实用程序 — taint 污点 taint节点上设置污点 中级命令 config — 修改kubeconfig文件 高级命令 命令 翻译 命令作用 — top 顶部显示资源（CPU/内存）使用情况 — auth 检查授权 — diff 对比 对比实时版本与将要应用的版本之间的差异 — wait 等待 等待实验：等待一个或多个资源的特定条件 proxy 代理 运行到Kubernetes API服务器的代理 cordon 警戒线 警戒线 将节点标记为不可调度 uncordon uncordon将节点标记为可调度 drain 排水 排水节点准备维护 completion 完成输出指定shell的shell完成代码（bash或zsh） certificate 证书 修改证书资源 cluster-info 集群信息 显示集群信息 port-forward 转发 将一个或多个本地端口转发到一个pod debug 调试 创建调试会话以对工作负载和节点进行故障排除 高级命令 kustomize 从目录或URL构建一个kustomization目标 品控级别(Track) 日期、时间 — 每天 daily — 每周 weekly — 常用命令：创建、删除 kubectl --help：可以通过--help查看详细的操作命令 kubectl命令的语法如下$ kubectl [command] [type] [name] [flags] command:&#x9;指定要对资源执行的操作，比如：create、get、delete type：指定资源的类型，比如：deployment、pod、service name： 指定资源的名称，名称大小写敏感 flags： 指定额外的可选参数 kubectl run --help：命令使用镜像创建容器 $ kubectl run nginx --image=nginx:1.</description>
    </item>
    <item>
      <title>Install_Kubernetes</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/install_kubernetes/</link>
      <pubDate>Tue, 25 Jun 2024 02:09:06 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/install_kubernetes/</guid>
      <description>部署Kubernetes Etcd：负责存储集群中各种资源对象的信息&#xA;Kubelet：负责维护容器的生命周期，即通过控制Docker，来创建、更新、销毁容器&#xA;KubeProxy：负责提供集群内部的服务发现和负载均衡&#xA;Docker：负责节点上容器的各种操作&#xA;Scheduler：负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上&#xA;API Server：集群操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制&#xA;ControllerManager：负责维护集群的状态，比如程序部署安排、故障检测、自动扩展和滚动更新等&#xA;Core DNS：可以为集群中的SVC创建一个域名IP的对应关系解析</description>
    </item>
    <item>
      <title>Install_K8s_Rancher</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/install_k8s_rancher/</link>
      <pubDate>Tue, 25 Jun 2024 02:05:41 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/install_k8s_rancher/</guid>
      <description>安装Rancher图形化管理 Rancher是供采用容器的团队使用的完整软件堆栈。它解决了管理多个 Kubernetes集群的运营和安全挑战，并为DevOps团队提供用于运行容器化工作负载的集成工具 必须存在Docker环境 服务器 IP 内存 CPU master 192.168.35.128 8G 8core node-1 192.</description>
    </item>
    <item>
      <title>Install_K8s_KubeSphere</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/install_k8s_kubesphere/</link>
      <pubDate>Tue, 25 Jun 2024 02:03:57 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/install_k8s_kubesphere/</guid>
      <description>在现有Kubernetes上安装KubeSphere Web管理系统 Kuboard一款免费的Kubernetes管理界面 KubeOperator可视化的Web UI 如需在Kubernetes上安装KubeSphere 3.3.0，您的Kubernetes版本必须为：v1.19.x，v1.20.x，v1.21.x，v1.22.x 或 v1.23.x（实验性支持） 确保您的机器满足最低硬件要求：CPU &gt; 1核、内存 &gt; 2GB 在安装之前，需要配置Kubernetes集群中的默认存储类型，以便实现动态供应 配置NFS的动态供应的默认存储类 $ cat &gt;/opt/k8s/yaml/data-storage.</description>
    </item>
    <item>
      <title>Install_K8s_Harbor</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/install_k8s_harbor/</link>
      <pubDate>Tue, 25 Jun 2024 02:01:28 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/install_k8s_harbor/</guid>
      <description>安装Harbor私有镜像库 默认用户名：admin 默认密码：Harbor12345 必须先安装docker Harbor依赖docker-compose 安装docker-compose $ curl -L https://get.daocloud.io/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose # 给予执行权限 $ chmod +x /usr/local/bin/docker-compose # 安装Compose命令补全工具 $ curl -L https://raw.</description>
    </item>
    <item>
      <title>Install_K8s_Dashboard</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/install_k8s_dashboard/</link>
      <pubDate>Tue, 25 Jun 2024 02:00:15 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/install_k8s_dashboard/</guid>
      <description>部署Dashboard(端口映射，可以用于web访问) 名称地址 描述 Kubernetes Dashboard 官方可视化界面 KubeSphere 青云 Rancher Kuboard kubernetes官方开发了一个基于web的用户界面DashBoard。用户可以使用DashBoard部署容器化的应用，而且还可以监控应用的状态，执行故障排查以及管理kubernetes中的各种资源。 下载用于部署DashBoard的yaml文件修改并运行 下载部署文件 $ cd /opt/kubernetes/cfg/ $ wget https://raw.</description>
    </item>
    <item>
      <title>Install_K8s_CoreDNS</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/install_k8s_coredns/</link>
      <pubDate>Tue, 25 Jun 2024 01:59:15 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/install_k8s_coredns/</guid>
      <description>安装CoreDNS 去官网下载CoreDNSdeploy.sh和coredns.yam.sed两个文件 CoreDNS配置 $ wget https://github.com/coredns/deployment/blob/08c2b11241ef67b5d22d2020c00001ce0baec566/kubernetes/deploy.sh $ wget https://github.com/coredns/deployment/blob/08c2b11241ef67b5d22d2020c00001ce0baec566/kubernetes/coredns.yaml.sed # 查看帮助 $ .</description>
    </item>
    <item>
      <title>Install_K8s_Argo_CD</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/install_k8s_argo_cd/</link>
      <pubDate>Tue, 25 Jun 2024 01:37:44 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/install_k8s_argo_cd/</guid>
      <description>Argo CD介绍 Argo CD是一个为Kubernetes而生的，遵循声明式GitOps理念的持续部署CD工具。Argo CD可在Git存储库更改时自动同步和部署应用程序 应用定义、配置和环境信息是声明式的，并可以进行版本控制 应用部署和生命周期管理是全自动化的、是可审计的，清晰易懂 安装Argo CD 创建ArgoCD命名空间 $ kubectl create namespace argocd 下载并启动ArgoCD $ kubectl apply -n argocd -f https://raw.</description>
    </item>
    <item>
      <title>Configure_K8s_Storage</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_storage/</link>
      <pubDate>Tue, 25 Jun 2024 01:33:15 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_storage/</guid>
      <description>Kubernetes数据存储 都知道容器的生命周期可能很短，会被频繁的创建和销毁。那么容器在销毁的时候，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况下是不乐意看到的。为了持久化保存容器中的数据，kubernetes引入了Volume的概念 Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里面的多个容器挂载到具体的文件目录下，kubernetes通过Volume实现同一个Pod中不同容器之间的数据共享以及数据的持久化存储。Volume的生命周期不和Pod中的单个容器的生命周期有关，当容器终止或者重启的时候，Volume中的数据也不会丢失 kubernetes的Volume支持多种类型，比较常见的有下面的几个： 简单存储：EmptyDir、HostPath、NFS 高级存储：PV、PVC 配置存储：ConfigMap、Secret 简单存储 EmptyDir EmptyDir是最基础的Volume类型，一个EmptyDir就是Host上的一个空目录 EmptyDir是在Pod被分配到Node时创建的，它的初始内容为空，并且无须指定宿主机上对应的目录文件，因为kubernetes会自动分配一个目录，当Pod销毁时，EmptyDir中的数据也会被永久删除。 EmptyDir的用途如下 临时空间例如用于某些应用程序运行时所需的临时目录，且无须永久保留 多容器共享目录一个容器需要从另一个容器中获取数据的目录 接下来，通过一个容器之间的共享案例来使用描述一个EmptyDir 在一个Pod中准备两个容器nginx和busybox然后声明一个volume分别挂载到两个容器的目录中，然后nginx容器负责向volume中写日志，busybox中通过命令将日志内容读到控制台 Kubernetes Emptydir Template模板 apiVersion: v1 kind: Pod metadata: name: emptydir-volume-template # 定义名称 namespace: default spec: # 必选，Pod中容器的详细定义 containers: # 必选，Pod中容器列表 - name: nginx image: nginx:1.</description>
    </item>
    <item>
      <title>Configure_K8s_Rancher</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_rancher/</link>
      <pubDate>Tue, 25 Jun 2024 01:31:25 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_rancher/</guid>
      <description>Rancher服务宕机情况下使用Kubernetes Cluster Rancher清理节点 #!/bin/bash KUBE_SVC=&#39; kubelet kube-scheduler kube-proxy kube-controller-manager kube-apiserver &#39; for kube_svc in ${KUBE_SVC}; do # 停止服务 if [[ `systemctl is-active ${kube_svc}` == &#39;active&#39; ]]; then systemctl stop ${kube_svc} fi # 禁止服务开机启动 if [[ `systemctl is-enabled ${kube_svc}` == &#39;enabled&#39; ]]; then systemctl disable ${kube_svc} fi done # 停止所有容器 docker stop $(docker ps -aq) # 删除所有容器 docker rm -f $(docker ps -qa) # 删除所有容器卷 docker volume rm $(docker volume ls -q) # 卸载mount目录 for mount in $(mount | grep tmpfs | grep &#39;/var/lib/kubelet&#39; | awk &#39;{ print $3 }&#39;) /var/lib/kubelet /var/lib/rancher; do umount $mount; done # 备份目录 mv /etc/kubernetes /etc/kubernetes-bak-$(date +&#34;%Y%m%d%H%M&#34;) mv /var/lib/etcd /var/lib/etcd-bak-$(date +&#34;%Y%m%d%H%M&#34;) mv /var/lib/rancher /var/lib/rancher-bak-$(date +&#34;%Y%m%d%H%M&#34;) mv /opt/rke /opt/rke-bak-$(date +&#34;%Y%m%d%H%M&#34;) # 删除残留路径 rm -rf /etc/ceph \ /etc/cni \ /opt/cni \ /run/secrets/kubernetes.</description>
    </item>
    <item>
      <title>Configure_K8s_Jcr</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_jcr/</link>
      <pubDate>Tue, 25 Jun 2024 01:30:31 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_jcr/</guid>
      <description>安装配置JFrog Artifactory 下载最新JFrog Artifactory社区版镜像 $ docker pull docker.bintray.io/jfrog/artifactory-jcr:latest 为私有镜像仓库做持久化存储 $ mkdir -p /opt/docker/volume/artifactory $ chmod 777 -R /opt/docker # 切换到上述目录后执行数据卷创建命令 $ cd /opt/docker/volume/artifactory $ docker volume create data 启动镜像 3.</description>
    </item>
    <item>
      <title>Configure_K8s_Helm</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_helm/</link>
      <pubDate>Tue, 25 Jun 2024 01:22:34 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_helm/</guid>
      <description>使用Helm配置管理K8s 名称地址 描述 Bitnami模板库 Kubernetes的Bitnami库 Helm安装Kubernetes服务Zabbix、Redis、Mysql模板 Kubernetes的Charts-docs库 Helm安装Kubernetes服务Zabbix、Redis、Mysql模板 查找、安装和发布Kubernetes包 Helm安装Kubernetes服务Zabbix、Redis、Mysql模板 kubernetes上的应用对象，都是由特定的资源描述组成，包括Deployment、Service等，都保存在各自文件中或者集中写在一个配置文件，然后通过kubectl apply -f 部署。如果应用只由一个或几个这样的服务组成，上面的部署方式就足够了。但是对于一个复杂的应用，会有很多类似上面的资源描述文件，例如微服务架构应用，组成应用的服务可能多达几十、上百个，如果有更新或回滚应用的需求，可能要修改和维护所涉及到大量的资源文件，而这种组织和管理应用的方式就显得力不从心了。并且由于缺少对发布过的应用进行版本管理和控制，使得kubernetes上的应用维护和更新面临诸多的挑战，主要面临以下的问题： 如何将这些服务作为一个整体管理？ 这些资源文件如何高效复用？ 应用级别的版本如何管理？ Helm是一个kubernetes的包管理工具，就像Linux下的包管理器，如yum、apt等，可以很方便的将之前打包好的yaml文件部署到kubernetes上 Helm有3个重要概念 helm：一个命令行客户端工具，主要用于kubernetes应用chart的创建、打包、发布和管理 chart：应用描述，一系列用于描述kubernetes资源相关文件的集合，类似Ansible的Playbook剧本 release：基于chart的部署实体，一个chart被Helm运行后将会生成对应的一个release，将在kubernetes中创建出真实运行的资源对象 Helm v3变化 最明显变化删除Tiller组件 release名称可以在不同的命名空间重用。 支持将chart推动到Docker镜像仓库中 使用JSONSchema验证chart values Helm常用命令 命令 描述 get 下载一个release。可用的子命令：all、hooks、manifest、note、values repo 添加、列出、移除、更新和索引chart仓库。可用的子命令：add、index、list、remove、update list 列出release pull 从远程仓库中下载chart并解压到本地。比如：helm install stable/mysql --untar show 查看chart的详细信息。可用的子命令：all、chart、readme、values search 根据关键字搜索chart。可用的子命令：all、chart、readme、values create 创建一个chart并指定名字 install 安装一个chart status 显示已命名版本的状态 upgrade 更新升级一个release history 获取release历史 package 将chart目录打包到chart存档文件中 template 本地呈现模板 rollback 从之前的版本回退 uninstall 卸载一个release dependency 管理chart依赖 version 查看Helm客户端版本 安装Helm 使用二进制安装Helm $ wget https://get.</description>
    </item>
    <item>
      <title>Configure_K8s_Auth</title>
      <link>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_auth/</link>
      <pubDate>Tue, 25 Jun 2024 01:12:49 +0800</pubDate><author>xxx@gmail.com (二哥)</author>
      <guid>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_auth/</guid>
      <description>安全控制 访问控制 kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对kubernetes的各种客户端进行认证和授权操作 在kubernetes集群中，客户端通常由两类： User Account：一般是独立于kubernetes之外的其他服务管理的用户账号 Service Account：kubernetes管理的账号，用于为Pod的服务进程在访问kubernetes时提供身份标识 graph LR C1((用户)) --&gt; B1(User&lt;br&gt;Account) --&gt; A((Kubernetes)) C2((Pod)) --&gt; B2(Service&lt;br&gt;Account) --&gt; A((Kubernetes)) 认证、授权和准入控制 API Server是访问和管理资源对象的唯一入口。任何一个请求访问API Server，都要经过下面的三个流程： Authentication(认证)：身份鉴别，只有正确的账号才能通过认证 Authorization(授权)：权限鉴别，判断用户是否有权限对访问的资源执行特定的动作 Admission Control(准入控制)：精细访问控制，用于补充授权机制以实现更加精细的访问控制功能 需要注意：在Kubernetes中不能通过API调用将普通用户添加到集群中 普通账户是针对（人）用户的，服务账户针对Pods进程 普通账户是全局性，在集群所有namespaces中，名称具有唯一性 通常，集群的普通账户可以与企业数据库同步，新的普通账户创建需要特殊权限，服务账户创建目的是更轻量化，允许集群用户为特定任务创建服务账户 普通账户和服务账户的审核注意事项不同 对于复杂系统的配置包，可以包括对该系统的各种组件的服务账户的定义 graph LR A((请求)) --&gt; B[Authentication&lt;br&gt;认证&lt;br&gt;身份鉴别&lt;br&gt;] --&gt; C[Authorization&lt;br&gt;授权&lt;br&gt;权限鉴别&lt;br&gt;] --&gt; D[Admission Control&lt;br&gt;注入控制&lt;br&gt;精细访问控制&lt;br&gt;] --&gt; E((Kubernetes&lt;br&gt;资源)) 认证管理 User Accounts(普通账户) Service Accounts(服务账户) apiVersion: v1 kind: ServiceAccount # 权限管理 metadata: name: nfs-client-provisioner namespace: default kubernetes的客户端http和https身份认证方式 kubernetes允许同时配置多种认证方式，只要其中任意一种方式认证通过即可 kubernetes集群安全的关键点在于如何识别并认证客户端身份，它提供了3种客户端身份认证方式 2.</description>
    </item>
  </channel>
</rss>