<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configure_K8s_Auth :: Hugo Relearn Theme</title>
    <link>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_auth/</link>
    <description>安全控制 访问控制 kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对kubernetes的各种客户端进行认证和授权操作 在kubernetes集群中，客户端通常由两类： User Account：一般是独立于kubernetes之外的其他服务管理的用户账号 Service Account：kubernetes管理的账号，用于为Pod的服务进程在访问kubernetes时提供身份标识 graph LR C1((用户)) --&gt; B1(User&lt;br&gt;Account) --&gt; A((Kubernetes)) C2((Pod)) --&gt; B2(Service&lt;br&gt;Account) --&gt; A((Kubernetes)) 认证、授权和准入控制 API Server是访问和管理资源对象的唯一入口。任何一个请求访问API Server，都要经过下面的三个流程： Authentication(认证)：身份鉴别，只有正确的账号才能通过认证 Authorization(授权)：权限鉴别，判断用户是否有权限对访问的资源执行特定的动作 Admission Control(准入控制)：精细访问控制，用于补充授权机制以实现更加精细的访问控制功能 需要注意：在Kubernetes中不能通过API调用将普通用户添加到集群中 普通账户是针对（人）用户的，服务账户针对Pods进程 普通账户是全局性，在集群所有namespaces中，名称具有唯一性 通常，集群的普通账户可以与企业数据库同步，新的普通账户创建需要特殊权限，服务账户创建目的是更轻量化，允许集群用户为特定任务创建服务账户 普通账户和服务账户的审核注意事项不同 对于复杂系统的配置包，可以包括对该系统的各种组件的服务账户的定义 graph LR A((请求)) --&gt; B[Authentication&lt;br&gt;认证&lt;br&gt;身份鉴别&lt;br&gt;] --&gt; C[Authorization&lt;br&gt;授权&lt;br&gt;权限鉴别&lt;br&gt;] --&gt; D[Admission Control&lt;br&gt;注入控制&lt;br&gt;精细访问控制&lt;br&gt;] --&gt; E((Kubernetes&lt;br&gt;资源)) 认证管理 User Accounts(普通账户) Service Accounts(服务账户) apiVersion: v1 kind: ServiceAccount # 权限管理 metadata: name: nfs-client-provisioner namespace: default kubernetes的客户端http和https身份认证方式 kubernetes允许同时配置多种认证方式，只要其中任意一种方式认证通过即可 kubernetes集群安全的关键点在于如何识别并认证客户端身份，它提供了3种客户端身份认证方式 2.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>xxx@gmail.com (二哥)</managingEditor>
    <webMaster>xxx@gmail.com (二哥)</webMaster>
    <lastBuildDate></lastBuildDate>
    <atom:link href="https://usermice.github.io/systems/linux/kubernetes/configure_k8s_auth/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>