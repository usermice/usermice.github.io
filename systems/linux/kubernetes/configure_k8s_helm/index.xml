<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configure_K8s_Helm :: Hugo Relearn Theme</title>
    <link>https://usermice.github.io/systems/linux/kubernetes/configure_k8s_helm/</link>
    <description>使用Helm配置管理K8s 名称地址 描述 Bitnami模板库 Kubernetes的Bitnami库 Helm安装Kubernetes服务Zabbix、Redis、Mysql模板 Kubernetes的Charts-docs库 Helm安装Kubernetes服务Zabbix、Redis、Mysql模板 查找、安装和发布Kubernetes包 Helm安装Kubernetes服务Zabbix、Redis、Mysql模板 kubernetes上的应用对象，都是由特定的资源描述组成，包括Deployment、Service等，都保存在各自文件中或者集中写在一个配置文件，然后通过kubectl apply -f 部署。如果应用只由一个或几个这样的服务组成，上面的部署方式就足够了。但是对于一个复杂的应用，会有很多类似上面的资源描述文件，例如微服务架构应用，组成应用的服务可能多达几十、上百个，如果有更新或回滚应用的需求，可能要修改和维护所涉及到大量的资源文件，而这种组织和管理应用的方式就显得力不从心了。并且由于缺少对发布过的应用进行版本管理和控制，使得kubernetes上的应用维护和更新面临诸多的挑战，主要面临以下的问题： 如何将这些服务作为一个整体管理？ 这些资源文件如何高效复用？ 应用级别的版本如何管理？ Helm是一个kubernetes的包管理工具，就像Linux下的包管理器，如yum、apt等，可以很方便的将之前打包好的yaml文件部署到kubernetes上 Helm有3个重要概念 helm：一个命令行客户端工具，主要用于kubernetes应用chart的创建、打包、发布和管理 chart：应用描述，一系列用于描述kubernetes资源相关文件的集合，类似Ansible的Playbook剧本 release：基于chart的部署实体，一个chart被Helm运行后将会生成对应的一个release，将在kubernetes中创建出真实运行的资源对象 Helm v3变化 最明显变化删除Tiller组件 release名称可以在不同的命名空间重用。 支持将chart推动到Docker镜像仓库中 使用JSONSchema验证chart values Helm常用命令 命令 描述 get 下载一个release。可用的子命令：all、hooks、manifest、note、values repo 添加、列出、移除、更新和索引chart仓库。可用的子命令：add、index、list、remove、update list 列出release pull 从远程仓库中下载chart并解压到本地。比如：helm install stable/mysql --untar show 查看chart的详细信息。可用的子命令：all、chart、readme、values search 根据关键字搜索chart。可用的子命令：all、chart、readme、values create 创建一个chart并指定名字 install 安装一个chart status 显示已命名版本的状态 upgrade 更新升级一个release history 获取release历史 package 将chart目录打包到chart存档文件中 template 本地呈现模板 rollback 从之前的版本回退 uninstall 卸载一个release dependency 管理chart依赖 version 查看Helm客户端版本 安装Helm 使用二进制安装Helm $ wget https://get.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>xxx@gmail.com (二哥)</managingEditor>
    <webMaster>xxx@gmail.com (二哥)</webMaster>
    <lastBuildDate></lastBuildDate>
    <atom:link href="https://usermice.github.io/systems/linux/kubernetes/configure_k8s_helm/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>